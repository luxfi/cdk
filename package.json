{
  "name": "cdk",
  "version": "1.0.0",
  "main": "main.js",
  "types": "main.ts",
  "license": "Apache-2.0",
  "private": true,
  "scripts": {
    "import": "cdk8s import",
    "synth": "cdk8s synth",
    "init": "npm run docker:pull && npm run docker:build",
    "docker:ava": "docker build -t auser/ava-node:latest ./docker/avalanchego && docker tag auser/ava-node:latest registry.localhost:5000/auser/ava-node:latest && docker push registry.localhost:5000/auser/ava-node:latest",
    "docker:worker": "docker build -t auser/worker:latest ./docker/worker && docker tag auser/worker:latest registry.localhost:5000/auser/worker:latest  && docker push registry.localhost:5000/auser/worker:latest",
    "docker:monitor": "docker build -t auser/mon-node:latest ./docker/mon && docker tag auser/mon-node:latest registry.localhost:5000/auser/mon-node:latest  && docker push registry.localhost:5000/auser/mon-node:latest",
    "docker:pull": "docker pull grafana/grafana-oss:latest && docker tag grafana/grafana-oss:latest registry.localhost:5000/grafana/grafana-oss:latest  && docker push registry.localhost:5000/grafana/grafana-oss:latest",
    "docker:build": "npm run docker:ava && npm run docker:monitor && npm run docker:worker",
    "clean": "tsc --build --clean",
    "replace:vars": "./scripts/replace-vars.ts",
    "predeploy": "npm run compile && npm run synth",
    "deploy": "kubectl apply -f dist/cdk.k8s.yaml",
    "reset": "kubectl delete -f dist/cdk.k8s.yaml 2>/dev/null; npm run compile && npm run synth && kubectl apply -f dist/cdk.k8s.yaml",
    "k3d:get-token": "kubectl -n kubernetes-dashboard describe secret admin-user-token | grep ^token",
    "k3d:run-registry": "docker run -d --name registry.localhost --restart=always -v $HOME/registry:/var/lib/registry -p 5000:5000 registry",
    "k3d:dashboard": "./scripts/install-dashboard.sh; kubectl proxy",
    "compile": "tsc -p .",
    "watch": "tsc -p . -w",
    "test": "jest",
    "minikube:start": "minikube start --mount --memory=8192 --cpus=4 --bootstrapper=kubeadm --driver=docker",
    "postminikube:start": "./scripts/init.sh",
    "minikube:stop": "minikube delete",
    "build": "npm run compile && npm run test && npm run synth",
    "addon:coredns": "(cd scripts/coredns && ./deploy.sh | kubectl apply -f - && kubectl delete --namespace=kube-system deployment kube-dns)",
    "upgrade": "npm i cdk8s@latest cdk8s-cli@latest",
    "upgrade:next": "npm i cdk8s@next cdk8s-cli@next",
    "nfs-volume": "docker run -idt --name nfs --privileged --restart unless-stopped -e SHARED_DIRECTORY=/data -v /tmp:/data --net=host itsthenetwork/nfs-server-alpine:latest",
    "nfs-ip": "docker ps 2>/dev/null | grep nfs | awk '{print $1}' | xargs  docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'"
  },
  "dependencies": {
    "cdk8s": "^1.3.32",
    "cdk8s-plus-22": "^1.0.0-beta.77",
    "constructs": "^3.3.178",
    "dotenv": "^10.0.0",
    "jsonminify": "^0.4.2",
    "kubernetes-client": "^9.0.0",
    "shelljs": "^0.8.5",
    "template-file": "^6.0.0"
  },
  "devDependencies": {
    "@types/debug": "^4.1.7",
    "@types/jest": "^26.0.24",
    "@types/jsonminify": "^0.4.1",
    "@types/node": "^14.18.4",
    "@types/shelljs": "^0.8.11",
    "@types/supports-color": "^8.1.1",
    "cdk8s-cli": "^1.0.84",
    "debug": "^4.3.3",
    "jest": "^26.6.3",
    "node-json-minify": "^3.0.0",
    "rimraf": "^3.0.2",
    "supports-color": "^9.2.1",
    "ts-jest": "^26.5.6",
    "ts-node": "^10.4.0",
    "typescript": "^4.5.4"
  }
}
